{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Toc} = _components;\n  if (!Toc) _missingMdxReference(\"Toc\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Toc, {\n      selector: \"#toc\",\n      items: \"[{\\\"anchor\\\":\\\"#developing\\\",\\\"title\\\":\\\"Developing\\\"},{\\\"anchor\\\":\\\"#build\\\",\\\"title\\\":\\\"Build\\\"},{\\\"anchor\\\":\\\"#release\\\",\\\"title\\\":\\\"Release\\\"},{\\\"anchor\\\":\\\"#troubleshoot\\\",\\\"title\\\":\\\"Troubleshoot\\\"}]\"\n    }), _jsx(_components.h1, {\n      id: \"scripts\",\n      children: _jsx(_components.a, {\n        href: \"#scripts\",\n        children: \"Scripts\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We use several scripts to make developing Marigold easier and more convenient.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run \", _jsx(_components.code, {\n        children: \"$ pnpm <script name>\"\n      }), \" in your favorite terminal.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"developing\",\n      children: _jsx(_components.a, {\n        href: \"#developing\",\n        children: \"Developing\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"dev\",\n      children: _jsx(_components.a, {\n        href: \"#dev\",\n        children: _jsx(_components.code, {\n          children: \"dev\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Boot up \", _jsx(_components.a, {\n        href: \"https://storybook.js.org/\",\n        children: \"Storybook\"\n      }), \" to maintain or develop new components or themes. This tool is especially useful to debug or make visual changes, check if a11y rules are satisfied or make interactive \", _jsx(_components.a, {\n        href: \"https://storybook.js.org/docs/react/writing-stories/play-function\",\n        children: \"play\"\n      }), \" examples.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"test--w\",\n      children: _jsx(_components.a, {\n        href: \"#test--w\",\n        children: _jsx(_components.code, {\n          children: \"test (-w)\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run the test suite. If you append \", _jsx(_components.code, {\n        children: \"-w\"\n      }), \" the suite will run in watch mode, meaning test that are affacted by your changes will be automatically re-run.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"start\",\n      children: _jsx(_components.a, {\n        href: \"#start\",\n        children: _jsx(_components.code, {\n          children: \"start\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Boot up the documentation website. This is helpful if you're writing or editing any documentation. Changes will be automatically detected and force a rebuild of the docs without you having to refresh the page in a browser.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"coverage\",\n      children: _jsx(_components.a, {\n        href: \"#coverage\",\n        children: _jsx(_components.code, {\n          children: \"coverage\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Same as \", _jsx(_components.code, {\n        children: \"test\"\n      }), \" but will output a coverage report into your terminal.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"lint\",\n      children: _jsx(_components.a, {\n        href: \"#lint\",\n        children: _jsx(_components.code, {\n          children: \"lint\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run \", _jsx(_components.a, {\n        href: \"https://eslint.org/\",\n        children: _jsx(_components.code, {\n          children: \"eslint\"\n        })\n      }), \" to check if source files adhere our lint standards. We basically using \", _jsx(_components.a, {\n        href: \"https://create-react-app.dev/\",\n        children: \"CRA\"\n      }), \"'s rules which are very lax and won't unnecessarily annoy you.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"format\",\n      children: _jsx(_components.a, {\n        href: \"#format\",\n        children: _jsx(_components.code, {\n          children: \"format\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run \", _jsx(_components.a, {\n        href: \"https://prettier.io/\",\n        children: _jsx(_components.code, {\n          children: \"prettier\"\n        })\n      }), \" and format source files. We don't care how our source code is formated as long everyone uses the same format.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"typecheck\",\n      children: _jsx(_components.a, {\n        href: \"#typecheck\",\n        children: _jsx(_components.code, {\n          children: \"typecheck\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run the \", _jsx(_components.a, {\n        href: \"https://www.typescriptlang.org/\",\n        children: \"TypeScript\"\n      }), \" compiler to find any inconsistent or wrong types.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"build\",\n      children: _jsx(_components.a, {\n        href: \"#build\",\n        children: \"Build\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"build-1\",\n      children: _jsx(_components.a, {\n        href: \"#build-1\",\n        children: _jsx(_components.code, {\n          children: \"build\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Build all the packages.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"watch\",\n      children: _jsx(_components.a, {\n        href: \"#watch\",\n        children: _jsx(_components.code, {\n          children: \"watch\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Build all the packages and rebuild them if any of their source files change.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"release\",\n      children: _jsx(_components.a, {\n        href: \"#release\",\n        children: \"Release\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to know how to release Marigold, go to the \", _jsx(_components.a, {\n        href: \"./release\",\n        children: \"Release\"\n      }), \" page.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"release-1\",\n      children: _jsx(_components.a, {\n        href: \"#release-1\",\n        children: _jsx(_components.code, {\n          children: \"release\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Run our release script to create a new release and deploy the documentation.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"releasedocs\",\n      children: _jsx(_components.a, {\n        href: \"#releasedocs\",\n        children: _jsx(_components.code, {\n          children: \"release:docs\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Deploy documentation.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"changeset\",\n      children: _jsx(_components.a, {\n        href: \"#changeset\",\n        children: _jsx(_components.code, {\n          children: \"changeset\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use changeset, see \", _jsx(_components.a, {\n        href: \"https://github.com/changesets/changesets/blob/main/docs/command-line-options.md\",\n        children: \"CLI options\"\n      }), \" for more information.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"troubleshoot\",\n      children: _jsx(_components.a, {\n        href: \"#troubleshoot\",\n        children: \"Troubleshoot\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"clean\",\n      children: _jsx(_components.a, {\n        href: \"#clean\",\n        children: _jsx(_components.code, {\n          children: \"clean\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Sometimes node modules have hick ups. This command will remove all \", _jsx(_components.code, {\n        children: \"node_module\"\n      }), \" and build folders so that you have a clean repo like you just git cloned it.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"cleanbuild\",\n      children: _jsx(_components.a, {\n        href: \"#cleanbuild\",\n        children: _jsx(_components.code, {\n          children: \"clean:build\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Same as \", _jsx(_components.code, {\n        children: \"clean\"\n      }), \" except it will only remove all build folders.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"postinstall\",\n      children: _jsx(_components.a, {\n        href: \"#postinstall\",\n        children: _jsx(_components.code, {\n          children: \"postinstall\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You don't ever have to run this is script. Basically, it will remove typings of toolings we use that uses an old version of emotion which causes loads of false-positive type errors in your project.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Scripts"},"scope":{}},"navigation":[{"title":"Code Hightlight Test","slug":"highlight"},{"title":"Marigold","slug":"index"},{"name":"introduction","items":[{"title":"Getting Started","caption":"This page describes how to get started building an application with Marigold.","order":1,"slug":"introduction/getting-started"},{"title":"About","caption":"Learn about the goals of Marigold and how it aims to help building user interfaces.","order":2,"slug":"introduction/about"},{"title":"Concepts","caption":"This page discusses the concepts and ideas that Marigold is build upon.","order":3,"slug":"introduction/concepts"},{"title":"Theming","caption":"This page explains how themes workd and how to use them.","order":4,"slug":"introduction/theming"},{"title":"FAQ","caption":"This pages aims to help with the most common questions and inquiries.","order":0,"slug":"introduction/faq"}],"groups":[]},{"name":"foundation","items":[{"title":"Box Primitive","slug":"foundation/box-primitive"},{"title":"CSS-in-JS","slug":"foundation/css-in-js"},{"title":"Icons","slug":"foundation/icons"},{"title":"Theme & Variants","slug":"foundation/themes-variants"}],"groups":[]},{"name":"components","items":[],"groups":[{"name":"Layout","items":[{"title":"Aside","group":"Layout","slug":"components/aside"},{"title":"Aspect","group":"Layout","slug":"components/aspect"},{"title":"Box","group":"Layout","slug":"components/box"},{"title":"Breakout","group":"Layout","slug":"components/breakout"},{"title":"Center","group":"Layout","slug":"components/center"},{"title":"Columns","group":"Layout","slug":"components/columns"},{"title":"Container","group":"Layout","slug":"components/container"},{"title":"Content","caption":"<short purpose of component> (optional)","group":"Layout","slug":"components/content"},{"title":"Divider","group":"Layout","slug":"components/divider"},{"title":"Inline","group":"Layout","slug":"components/inline"},{"title":"Split","group":"Layout","slug":"components/split"},{"title":"Stack","group":"Layout","slug":"components/stack"},{"title":"Tiles","group":"Layout","slug":"components/tiles"}]},{"name":"Forms","items":[{"title":"Button","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=11%3A269","switch":true,"slug":"components/button"},{"title":"Checkbox","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=467%3A159","group":"Forms","switch":true,"slug":"components/checkbox"},{"title":"Input","group":"Forms","switch":true,"slug":"components/input"},{"title":"Label","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=92%3A0","switch":true,"slug":"components/label"},{"title":"NumberField","group":"Forms","switch":true,"slug":"components/number-field"},{"title":"Radio","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=467%3A332","switch":true,"slug":"components/radio"},{"title":"Select","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=2596%3A2348","switch":true,"slug":"components/select"},{"title":"Slider","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=845%3A1254","switch":true,"slug":"components/slider"},{"title":"Switch","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=2458%3A2254","slug":"components/switch"},{"title":"TextArea","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=454%3A1","group":"Forms","switch":true,"slug":"components/text-area"},{"title":"TextField","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=340%3A0","group":"Forms","switch":true,"slug":"components/text-field"}]},{"name":"Collections","items":[{"title":"Table","group":"Collections","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=2387%3A1928","switch":true,"slug":"components/table"}]},{"name":"Overlay","items":[{"title":"Dialog","group":"Overlay","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=845%3A1095","switch":true,"slug":"components/dialog"},{"title":"Menu","group":"Overlay","slug":"components/menu"},{"title":"Tooltip","group":"Overlay","slug":"components/tooltip"}]},{"name":"Content","items":[{"title":"Badge","group":"Content","switch":true,"slug":"components/badge"},{"title":"Card","group":"Content","switch":true,"slug":"components/card"},{"title":"Footer","group":"Content","slug":"components/footer"},{"title":"Header","group":"Content","slug":"components/header"},{"title":"Headline","caption":"<short purpose of component> (optional)","group":"Content","switch":true,"slug":"components/headline"},{"title":"Icon","group":"Content","slug":"components/icon"},{"title":"Image","group":"Content","slug":"components/image"},{"title":"Link","group":"Content","switch":true,"slug":"components/link"},{"title":"List","group":"Content","switch":true,"slug":"components/list"},{"title":"Message","group":"Content","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=582%3A119","switch":true,"slug":"components/message"},{"title":"Text","group":"Content","switch":true,"slug":"components/text"},{"title":"VisuallyHidden","group":"Content","slug":"components/visually-hidden"}]},{"name":"Application","items":[{"title":"Provider","group":"Application","slug":"components/provider"}]}]},{"name":"develop","items":[{"title":"Release","slug":"develop/release"},{"title":"Scripts","slug":"develop/scripts"}],"groups":[]}]},"__N_SSG":true}