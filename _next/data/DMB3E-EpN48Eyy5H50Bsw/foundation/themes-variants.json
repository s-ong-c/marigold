{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    code: \"code\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components), {Toc} = _components;\n  if (!Toc) _missingMdxReference(\"Toc\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Toc, {\n      selector: \"#toc\",\n      items: \"[{\\\"anchor\\\":\\\"#theme-object\\\",\\\"title\\\":\\\"Theme Object\\\"},{\\\"anchor\\\":\\\"#api\\\",\\\"title\\\":\\\"API\\\"}]\"\n    }), _jsx(_components.p, {\n      children: \"Marigold uses a theme for its base styles.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"theme-object\",\n      children: _jsx(_components.a, {\n        href: \"#theme-object\",\n        children: \"Theme Object\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Theming is based on a \", _jsx(_components.code, {\n        children: \"theme object\"\n      }), \" that builds on the \", _jsx(_components.a, {\n        href: \"https://system-ui.com/theme/\",\n        children: \"System UI Theme Specification\"\n      }), \".\\nThe theme object defines your application's spacings, colors, fonts and component styles. In the theme, you can define root styles that are applied globally.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"spacings\",\n      children: _jsx(_components.a, {\n        href: \"#spacings\",\n        children: \"Spacings\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using semantic values for spacings makes it easier to apply the variables within the theme consistently. Use CSS length units in a string to define the following keys.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"none\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"xxsmall\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"xsmall\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"small\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"medium\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"large\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"xlarge\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"xxlarge\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"colors\",\n      children: _jsx(_components.a, {\n        href: \"#colors\",\n        children: \"Colors\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Add the following color keys to your theme in order to provide a base set of colors. These are re-used in the components.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"primary\"\n        }), \" (brand color for links, buttons, etc.)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"secondary\"\n        }), \" (alternative styling for brand color)\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"text\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"background\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"disabled\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"error\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"warning\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"info\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"success\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"typography\",\n      children: _jsx(_components.a, {\n        href: \"#typography\",\n        children: \"Typography\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Store the core typographic values in the following theme keys:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"fonts\"\n        }), \" (font family)\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"fontSizes\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"fontWeights\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"lineHeights\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"variants\",\n      children: _jsx(_components.a, {\n        href: \"#variants\",\n        children: \"Variants\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Marigold components extract styles from the theme induced by a ThemeProvider. You can define theme styles in scopes of variants for the components\\nyou intend to use. By creating variant objects on the same level with the component prefix on the top level, you can access its values by using the\\nvariant name in the component. If you want the same base styles applied to all the variants of one component, use a root object which you define outside the\\ntheme. See an example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"// Root styles\\nconst message = {\\n  root: {\\n      borderStyle: 'solid',\\n      borderWidth: '2px 2px 2px 0px',\\n  },\\n};\\n\\nconst theme: BaseTheme = {\\n  breakpoints: ...,\\n  space: ...,\\n  ...,\\n  message: { // Component prefix\\n    error: { // First variant\\n      ...message.root,\\n      borderColor: 'error',\\n    },\\n    warning: { // Second variant\\n      ...message.root,\\n      borderColor: 'warning',\\n    },\\n  },\\n};\\n\\n// Usage\\n<Message variant=\\\"error\\\">Error message</Message>\\n<Message variant=\\\"warning\\\">Warning message</Message>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"api\",\n      children: _jsx(_components.a, {\n        href: \"#api\",\n        children: \"API\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"themeprovider\",\n      children: _jsx(_components.a, {\n        href: \"#themeprovider\",\n        children: \"ThemeProvider\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"ThemeProvider\"\n      }), \" is a wrapper around the component tree on the root level and applies the theme to the components.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { ThemeProvider } from '@marigold/system';\\nimport b2bTheme from '@marigold/theme-b2b';\\n\\nexport const ThemeProvider: React.FC = ({ children }) => {\\n  return <ThemeProvider theme={b2bTheme}>{children}</ThemeProvider>;\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"access-theme-variables\",\n      children: _jsx(_components.a, {\n        href: \"#access-theme-variables\",\n        children: \"Access Theme Variables\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Theme variables are styles that are stored in key-value-pairs and defined as described above.\\nIf you change the theme, the value for a certain variable can change because a different style is stored in the new theme.\\nReuse theme variables within the theme while defining variants of a component. Like this, you create a unique theme that is applied in all the components:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const theme: BaseTheme = {\\n  fonts: {\\n    body: 'Inter',\\n    heading: 'Inter Black',\\n  },\\n  fontSizes: {\\n    xxsmall: '0.875rem',\\n    xsmall: '1rem',\\n    small: '1.125rem',\\n    medium: '1.25rem',\\n    large: '1.5rem',\\n    xlarge: '2rem',\\n  },\\n  ...,\\n  h1: {\\n    font: 'body', // theme variable\\n    fontSize: 'xlarge', // theme variable\\n  }\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These values can also be accessed in\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Box css={{ fontSize: 'small' }}>...</Box>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"create-a-theme\",\n      children: _jsx(_components.a, {\n        href: \"#create-a-theme\",\n        children: \"Create a Theme\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a file, e.g. \", _jsx(_components.code, {\n        children: \"index.ts\"\n      }), \" in your theme folder and define your theme object.\\nDefine the overall applied root styles in the theme aswell.\\nImport and use the theme in the \", _jsx(_components.code, {\n        children: \"<ThemeProvider>\"\n      }), \".\\nSee a working example base theme here:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const theme: BaseTheme = {\\n  styles: {\\n    root: {\\n      fontFamily: 'body',\\n      margin: 0,\\n      padding: 0,\\n    },\\n  },\\n  breakpoints: ['768', '1200'],\\n  space: {\\n    none: 0,\\n    xxsmall: 4,\\n    xsmall: 8,\\n    small: 16,\\n    medium: 24,\\n    large: 32,\\n    xlarge: 40,\\n    xxlarge: 48,\\n  },\\n  fonts: {\\n    body: 'Inter',\\n    heading: 'Inter Black',\\n  },\\n  fontSizes: {\\n    xxsmall: '0.875rem',\\n    xsmall: '1rem',\\n    small: '1.125rem',\\n    medium: '1.25rem',\\n    large: '1.5rem',\\n    xlarge: '2rem',\\n  },\\n  fontWeights: {\\n    body: 400,\\n    heading: 900,\\n    bold: 700,\\n  },\\n  lineHeights: {\\n    body: 1.5,\\n    heading: 1.125,\\n  },\\n  colors: {\\n    text: '#4b4b4b',\\n    background: '#fafafa',\\n    primary: '#fa8005',\\n    secondary: '#4b4b4b',\\n    disabled: '#e3e3e3',\\n    error: '#dd4142',\\n    warning: '#fa8005',\\n    info: '#1d67b6',\\n    success: '#44a112',\\n  },\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"key-reference\",\n      children: _jsx(_components.a, {\n        href: \"#key-reference\",\n        children: \"Key Reference\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Different theme keys can be used as different CSS properties.\\nSee the theme object keys and the corresponding CSS properties in the following table.\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            align: \"left\",\n            children: \"Theme Key\"\n          }), _jsx(_components.th, {\n            align: \"left\",\n            children: \"CSS Properties\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"styles.root\"\n            })\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: \"CSSObject\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"space\"\n            })\n          }), _jsxs(_components.td, {\n            align: \"left\",\n            children: [_jsx(_components.code, {\n              children: \"margin\"\n            }), \", \", _jsx(_components.code, {\n              children: \"margin-top\"\n            }), \", \", _jsx(_components.code, {\n              children: \"margin-right\"\n            }), \", \", _jsx(_components.code, {\n              children: \"margin-bottom\"\n            }), \", \", _jsx(_components.code, {\n              children: \"margin-left\"\n            }), \", \", _jsx(_components.code, {\n              children: \"padding\"\n            }), \", \", _jsx(_components.code, {\n              children: \"padding-top\"\n            }), \", \", _jsx(_components.code, {\n              children: \"padding-right\"\n            }), \", \", _jsx(_components.code, {\n              children: \"padding-bottom\"\n            }), \", \", _jsx(_components.code, {\n              children: \"padding-left\"\n            }), \", \", _jsx(_components.code, {\n              children: \"grid-gap\"\n            }), \", \", _jsx(_components.code, {\n              children: \"grid-column-gap\"\n            }), \", \", _jsx(_components.code, {\n              children: \"grid-row-gap\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"breakpoints\"\n            })\n          }), _jsxs(_components.td, {\n            align: \"left\",\n            children: [_jsx(_components.code, {\n              children: \"min-width\"\n            }), \" (media query)\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"fonts\"\n            })\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"font-family \"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"fontSizes\"\n            })\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"font-size\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"fontWeights\"\n            })\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"font-weight\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"lineHeights\"\n            })\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"line-height\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"colors\"\n            })\n          }), _jsxs(_components.td, {\n            align: \"left\",\n            children: [_jsx(_components.code, {\n              children: \"color\"\n            }), \", \", _jsx(_components.code, {\n              children: \"background-color\"\n            }), \", \", _jsx(_components.code, {\n              children: \"border-color\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"examples\",\n      children: _jsx(_components.a, {\n        href: \"#examples\",\n        children: \"Examples\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See example themes under \", _jsx(_components.a, {\n        href: \"/themes/b2b\",\n        children: \"Themes/B2B\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/themes/unicorn\",\n        children: \"Themes/Unicorn\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Theme & Variants"},"scope":{}},"navigation":[{"title":"Code Hightlight Test","slug":"highlight"},{"title":"Marigold","slug":"index"},{"name":"introduction","items":[{"title":"Getting Started","caption":"This page describes how to get started building an application with Marigold.","order":1,"slug":"introduction/getting-started"},{"title":"About","caption":"Learn about the goals of Marigold and how it aims to help building user interfaces.","order":2,"slug":"introduction/about"},{"title":"Concepts","caption":"This page discusses the concepts and ideas that Marigold is build upon.","order":3,"slug":"introduction/concepts"},{"title":"Theming","caption":"This page explains how themes workd and how to use them.","order":4,"slug":"introduction/theming"},{"title":"FAQ","caption":"This pages aims to help with the most common questions and inquiries.","order":0,"slug":"introduction/faq"}],"groups":[]},{"name":"foundation","items":[{"title":"Box Primitive","slug":"foundation/box-primitive"},{"title":"CSS-in-JS","slug":"foundation/css-in-js"},{"title":"Icons","slug":"foundation/icons"},{"title":"Theme & Variants","slug":"foundation/themes-variants"}],"groups":[]},{"name":"components","items":[],"groups":[{"name":"Layout","items":[{"title":"Aside","group":"Layout","slug":"components/aside"},{"title":"Aspect","group":"Layout","slug":"components/aspect"},{"title":"Box","group":"Layout","slug":"components/box"},{"title":"Breakout","group":"Layout","slug":"components/breakout"},{"title":"Center","group":"Layout","slug":"components/center"},{"title":"Columns","group":"Layout","slug":"components/columns"},{"title":"Container","group":"Layout","slug":"components/container"},{"title":"Content","caption":"<short purpose of component> (optional)","group":"Layout","slug":"components/content"},{"title":"Divider","group":"Layout","slug":"components/divider"},{"title":"Inline","group":"Layout","slug":"components/inline"},{"title":"Split","group":"Layout","slug":"components/split"},{"title":"Stack","group":"Layout","slug":"components/stack"},{"title":"Tiles","group":"Layout","slug":"components/tiles"}]},{"name":"Forms","items":[{"title":"Button","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=11%3A269","switch":true,"slug":"components/button"},{"title":"Checkbox","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=467%3A159","group":"Forms","switch":true,"slug":"components/checkbox"},{"title":"Input","group":"Forms","switch":true,"slug":"components/input"},{"title":"Label","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=92%3A0","switch":true,"slug":"components/label"},{"title":"NumberField","group":"Forms","switch":true,"slug":"components/number-field"},{"title":"Radio","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=467%3A332","switch":true,"slug":"components/radio"},{"title":"Select","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=2596%3A2348","switch":true,"slug":"components/select"},{"title":"Slider","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=845%3A1254","switch":true,"slug":"components/slider"},{"title":"Switch","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=2458%3A2254","slug":"components/switch"},{"title":"TextArea","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=454%3A1","group":"Forms","switch":true,"slug":"components/text-area"},{"title":"TextField","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=340%3A0","group":"Forms","switch":true,"slug":"components/text-field"}]},{"name":"Collections","items":[{"title":"Table","group":"Collections","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=2387%3A1928","switch":true,"slug":"components/table"}]},{"name":"Overlay","items":[{"title":"Dialog","group":"Overlay","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=845%3A1095","switch":true,"slug":"components/dialog"},{"title":"Menu","group":"Overlay","slug":"components/menu"},{"title":"Tooltip","group":"Overlay","slug":"components/tooltip"}]},{"name":"Content","items":[{"title":"Badge","group":"Content","switch":true,"slug":"components/badge"},{"title":"Card","group":"Content","switch":true,"slug":"components/card"},{"title":"Footer","group":"Content","slug":"components/footer"},{"title":"Header","group":"Content","slug":"components/header"},{"title":"Headline","caption":"<short purpose of component> (optional)","group":"Content","switch":true,"slug":"components/headline"},{"title":"Icon","group":"Content","slug":"components/icon"},{"title":"Image","group":"Content","slug":"components/image"},{"title":"Link","group":"Content","switch":true,"slug":"components/link"},{"title":"List","group":"Content","switch":true,"slug":"components/list"},{"title":"Message","group":"Content","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=582%3A119","switch":true,"slug":"components/message"},{"title":"Text","group":"Content","switch":true,"slug":"components/text"},{"title":"VisuallyHidden","group":"Content","slug":"components/visually-hidden"}]},{"name":"Application","items":[{"title":"Provider","group":"Application","slug":"components/provider"}]}]},{"name":"develop","items":[{"title":"Release","slug":"develop/release"},{"title":"Scripts","slug":"develop/scripts"}],"groups":[]}]},"__N_SSG":true}