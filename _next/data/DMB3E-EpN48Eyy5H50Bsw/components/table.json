{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    a: \"a\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Toc, Preview, TableDemo} = _components;\n  if (!Preview) _missingMdxReference(\"Preview\", true);\n  if (!TableDemo) _missingMdxReference(\"TableDemo\", true);\n  if (!Toc) _missingMdxReference(\"Toc\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Toc, {\n      selector: \"#toc\",\n      items: \"[{\\\"anchor\\\":\\\"#props\\\",\\\"title\\\":\\\"Props\\\"},{\\\"anchor\\\":\\\"#examples\\\",\\\"title\\\":\\\"Examples\\\"}]\"\n    }), _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Table\"\n      }), \" component allows to present data in a table format. It enhances the functionality of regular \", _jsx(_components.code, {\n        children: \"<table>\"\n      }), \" elements with the possibility to interact and select the data, as well as, helps with accessibility by providing keyboard navigation.\"]\n    }), \"\\n\", _jsx(Preview, {\n      children: _jsx(TableDemo, {})\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Table } from '@marigold/components';\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: _jsx(_components.a, {\n        href: \"#props\",\n        children: \"Props\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            align: \"left\",\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            align: \"left\",\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            align: \"left\",\n            children: \"Default\"\n          }), _jsx(_components.th, {\n            align: \"left\",\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            align: \"left\",\n            children: [_jsx(_components.code, {\n              children: \"selectionMode\"\n            }), \" (optional)\"]\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"'none', 'single', 'multiple'\"\n            })\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"'none'\"\n            })\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: \"The type of selection that is allowed in the collection.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            align: \"left\",\n            children: [_jsx(_components.code, {\n              children: \"onSelectionChange\"\n            }), \" (optional)\"]\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"(keys: Selection) => any\"\n            })\n          }), _jsx(_components.td, {\n            align: \"left\"\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: \"Handler that is called when the selection changes.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            align: \"left\",\n            children: [_jsx(_components.code, {\n              children: \"stretch\"\n            }), \" (optional)\"]\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"boolean\"\n            })\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: _jsx(_components.code, {\n              children: \"false\"\n            })\n          }), _jsx(_components.td, {\n            align: \"left\",\n            children: \"Stretch table to fill the container\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"examples\",\n      children: _jsx(_components.a, {\n        href: \"#examples\",\n        children: \"Examples\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"selection-mode-single\",\n      children: _jsx(_components.a, {\n        href: \"#selection-mode-single\",\n        children: \"Selection mode single\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Table aria-label=\\\"Table with multiple selection\\\" selectionMode=\\\"single\\\">\\n  <Table.Header>\\n    <Table.Column>Name</Table.Column>\\n    <Table.Column>Firstname</Table.Column>\\n    <Table.Column>House</Table.Column>\\n    <Table.Column>Year of birth</Table.Column>\\n  </Table.Header>\\n  <Table.Body>\\n    <Table.Row key={1}>\\n      <Table.Cell>Potter</Table.Cell>\\n      <Table.Cell>Harry</Table.Cell>\\n      <Table.Cell>Gryffindor</Table.Cell>\\n      <Table.Cell>1980</Table.Cell>\\n    </Table.Row>\\n    <Table.Row key={2}>\\n      <Table.Cell>Malfoy</Table.Cell>\\n      <Table.Cell>Draco</Table.Cell>\\n      <Table.Cell>Slytherin</Table.Cell>\\n      <Table.Cell>1980</Table.Cell>\\n    </Table.Row>\\n    <Table.Row key={3}>\\n      <Table.Cell>Diggory</Table.Cell>\\n      <Table.Cell>Cedric</Table.Cell>\\n      <Table.Cell>Hufflepuff</Table.Cell>\\n      <Table.Cell>1977</Table.Cell>\\n    </Table.Row>\\n    <Table.Row key={4}>\\n      <Table.Cell>Lovegood</Table.Cell>\\n      <Table.Cell>Luna</Table.Cell>\\n      <Table.Cell>Ravenclaw</Table.Cell>\\n      <Table.Cell>1981</Table.Cell>\\n    </Table.Row>\\n  </Table.Body>\\n</Table>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"selection-mode-multiple\",\n      children: _jsx(_components.a, {\n        href: \"#selection-mode-multiple\",\n        children: \"Selection mode multiple\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Table aria-label=\\\"Table with multiple selection\\\" selectionMode=\\\"multiple\\\">\\n  <Table.Header>\\n    <Table.Column>Name</Table.Column>\\n    <Table.Column>Firstname</Table.Column>\\n    <Table.Column>House</Table.Column>\\n    <Table.Column>Year of birth</Table.Column>\\n  </Table.Header>\\n  <Table.Body>\\n    <Table.Row>\\n      <Table.Cell>Potter</Table.Cell>\\n      <Table.Cell>Harry</Table.Cell>\\n      <Table.Cell>Gryffindor</Table.Cell>\\n      <Table.Cell>1980</Table.Cell>\\n    </Table.Row>\\n    <Table.Row>\\n      <Table.Cell>Malfoy</Table.Cell>\\n      <Table.Cell>Draco</Table.Cell>\\n      <Table.Cell>Slytherin</Table.Cell>\\n      <Table.Cell>1980</Table.Cell>\\n    </Table.Row>\\n    <Table.Row>\\n      <Table.Cell>Diggory</Table.Cell>\\n      <Table.Cell>Cedric</Table.Cell>\\n      <Table.Cell>Hufflepuff</Table.Cell>\\n      <Table.Cell>1977</Table.Cell>\\n    </Table.Row>\\n    <Table.Row>\\n      <Table.Cell>Lovegood</Table.Cell>\\n      <Table.Cell>Luna</Table.Cell>\\n      <Table.Cell>Ravenclaw</Table.Cell>\\n      <Table.Cell>1981</Table.Cell>\\n    </Table.Row>\\n  </Table.Body>\\n</Table>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"dynamic-collections\",\n      children: _jsx(_components.a, {\n        href: \"#dynamic-collections\",\n        children: \"Dynamic collections\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"() => {\\n  const columns = [\\n    { name: 'Name', key: 'name' },\\n    { name: 'Firstname', key: 'firstname' },\\n    { name: 'House', key: 'house' },\\n    { name: 'Year of birth', key: 'year' },\\n  ];\\n  const rows = [\\n    {\\n      id: '1',\\n      name: 'Potter',\\n      firstname: 'Harry',\\n      house: 'Gryffindor',\\n      year: '1980',\\n    },\\n    {\\n      id: '2',\\n      name: 'Malfoy',\\n      firstname: 'Draco',\\n      house: 'Slytherin',\\n      year: '1980',\\n    },\\n    {\\n      id: '3',\\n      name: 'Diggory',\\n      firstname: 'Cedric',\\n      house: 'Hufflepuff',\\n      year: '1977',\\n    },\\n    {\\n      id: '4',\\n      name: 'Lovegood',\\n      firstname: 'Luna',\\n      house: 'Ravenclaw',\\n      year: '1981',\\n    },\\n  ];\\n  const [selectedKeys, setSelectedKeys] = React.useState(new Set());\\n  return (\\n    <Stack space=\\\"small\\\">\\n      <Table\\n        aria-label=\\\"Example dynamic collection table\\\"\\n        selectionMode=\\\"multiple\\\"\\n        onSelectionChange={key => setSelectedKeys(new Set(key))}\\n      >\\n        <Table.Header columns={columns}>\\n          {column => <Table.Column>{column.name}</Table.Column>}\\n        </Table.Header>\\n        <Table.Body items={rows}>\\n          {item => (\\n            <Table.Row>\\n              {columnKey => <Table.Cell>{item[columnKey]}</Table.Cell>}\\n            </Table.Row>\\n          )}\\n        </Table.Body>\\n      </Table>\\n      <Text>Selected rows: {selectedKeys}</Text>\\n    </Stack>\\n  );\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"disabled-rows\",\n      children: _jsx(_components.a, {\n        href: \"#disabled-rows\",\n        children: \"Disabled Rows\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Table\\n  aria-label=\\\"Table with multiple selection\\\"\\n  selectionMode=\\\"multiple\\\"\\n  disabledKeys={['Malfoy']}\\n>\\n  <Table.Header>\\n    <Table.Column>Name</Table.Column>\\n    <Table.Column>Firstname</Table.Column>\\n    <Table.Column>House</Table.Column>\\n    <Table.Column>Year of birth</Table.Column>\\n  </Table.Header>\\n  <Table.Body>\\n    <Table.Row key=\\\"Potter\\\">\\n      <Table.Cell>Potter</Table.Cell>\\n      <Table.Cell>Harry</Table.Cell>\\n      <Table.Cell>Gryffindor</Table.Cell>\\n      <Table.Cell>1980</Table.Cell>\\n    </Table.Row>\\n    <Table.Row key=\\\"Malfoy\\\">\\n      <Table.Cell>Malfoy</Table.Cell>\\n      <Table.Cell>Draco</Table.Cell>\\n      <Table.Cell>Slytherin</Table.Cell>\\n      <Table.Cell>1980</Table.Cell>\\n    </Table.Row>\\n    <Table.Row key=\\\"Diggory\\\">\\n      <Table.Cell>Diggory</Table.Cell>\\n      <Table.Cell>Cedric</Table.Cell>\\n      <Table.Cell>Hufflepuff</Table.Cell>\\n      <Table.Cell>1977</Table.Cell>\\n    </Table.Row>\\n    <Table.Row key=\\\"Lovegood\\\">\\n      <Table.Cell>Lovegood</Table.Cell>\\n      <Table.Cell>Luna</Table.Cell>\\n      <Table.Cell>Ravenclaw</Table.Cell>\\n      <Table.Cell>1981</Table.Cell>\\n    </Table.Row>\\n  </Table.Body>\\n</Table>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"sorting\",\n      children: _jsx(_components.a, {\n        href: \"#sorting\",\n        children: \"Sorting\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"() => {\\n  const data = [\\n    {\\n      name: 'Luke Skywalker',\\n      height: '172',\\n      mass: '77',\\n      birth_year: '19BBY',\\n    },\\n    {\\n      name: 'C-3PO',\\n      height: '167',\\n      mass: '75',\\n      birth_year: '112BBY',\\n    },\\n    {\\n      name: 'R2-D2',\\n      height: '96',\\n      mass: '32',\\n      birth_year: '33BBY',\\n    },\\n    {\\n      name: 'Darth Vader',\\n      height: '202',\\n      mass: '136',\\n      birth_year: '41.9BBY',\\n    },\\n    {\\n      name: 'Leia Organa',\\n      height: '150',\\n      mass: '49',\\n      birth_year: '19BBY',\\n    },\\n    {\\n      name: 'Owen Lars',\\n      height: '178',\\n      mass: '120',\\n      birth_year: '52BBY',\\n    },\\n    {\\n      name: 'Beru Whitesun lars',\\n      height: '165',\\n      mass: '75',\\n      birth_year: '47BBY',\\n    },\\n    {\\n      name: 'R5-D4',\\n      height: '97',\\n      mass: '32',\\n      birth_year: 'unknown',\\n    },\\n    {\\n      name: 'Biggs Darklighter',\\n      height: '183',\\n      mass: '84',\\n      birth_year: '24BBY',\\n    },\\n    {\\n      name: 'Obi-Wan Kenobi',\\n      height: '182',\\n      mass: '77',\\n      birth_year: '57BBY',\\n    },\\n  ];\\n\\n  const [list, setList] = React.useState(data);\\n  const [descriptor, setDescriptor] = React.useState({});\\n  const sort = ({ column, direction }) => {\\n    const result = list.sort((a, b) => {\\n      const first = a[column];\\n      const second = b[column];\\n      let cmp =\\n        (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1;\\n      if (direction === 'descending') {\\n        cmp *= -1;\\n      }\\n      return cmp;\\n    });\\n    setDescriptor({ column, direction });\\n    setList(result);\\n  };\\n\\n  return (\\n    <Table\\n      aria-label=\\\"Example table with client side sorting\\\"\\n      sortDescriptor={descriptor}\\n      onSortChange={sort}\\n    >\\n      <Table.Header>\\n        <Table.Column key=\\\"name\\\" allowsSorting>\\n          Name\\n        </Table.Column>\\n        <Table.Column key=\\\"height\\\" allowsSorting>\\n          Height\\n        </Table.Column>\\n        <Table.Column key=\\\"mass\\\" allowsSorting>\\n          Mass\\n        </Table.Column>\\n        <Table.Column key=\\\"birth_year\\\" allowsSorting>\\n          Birth Year\\n        </Table.Column>\\n      </Table.Header>\\n      <Table.Body items={list}>\\n        {item => (\\n          <Table.Row key={item.name}>\\n            {columnKey => <Table.Cell>{item[columnKey]}</Table.Cell>}\\n          </Table.Row>\\n        )}\\n      </Table.Body>\\n    </Table>\\n  );\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"nested-columns\",\n      children: _jsx(_components.a, {\n        href: \"#nested-columns\",\n        children: \"Nested Columns\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Columns can be nested, which will result in more than one header row to be created. Note the usage of \", _jsx(_components.code, {\n        children: \"isRowHeader\"\n      }), \" in the example below. By default, only the first column is included in the accessibility name for each row.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Table aria-label=\\\"Example table for nested columns\\\">\\n  <Table.Header>\\n    <Table.Column title=\\\"Name\\\">\\n      <Table.Column isRowHeader>First Name</Table.Column>\\n      <Table.Column isRowHeader>Last Name</Table.Column>\\n    </Table.Column>\\n    <Table.Column title=\\\"Information\\\">\\n      <Table.Column>Age</Table.Column>\\n      <Table.Column>Birthday</Table.Column>\\n    </Table.Column>\\n  </Table.Header>\\n  <Table.Body>\\n    <Table.Row>\\n      <Table.Cell>Sam</Table.Cell>\\n      <Table.Cell>Smith</Table.Cell>\\n      <Table.Cell>36</Table.Cell>\\n      <Table.Cell>May 3</Table.Cell>\\n    </Table.Row>\\n    <Table.Row>\\n      <Table.Cell>Julia</Table.Cell>\\n      <Table.Cell>Jones</Table.Cell>\\n      <Table.Cell>24</Table.Cell>\\n      <Table.Cell>February 10</Table.Cell>\\n    </Table.Row>\\n    <Table.Row>\\n      <Table.Cell>Peter</Table.Cell>\\n      <Table.Cell>Parker</Table.Cell>\\n      <Table.Cell>28</Table.Cell>\\n      <Table.Cell>September 7</Table.Cell>\\n    </Table.Row>\\n    <Table.Row>\\n      <Table.Cell>Bruce</Table.Cell>\\n      <Table.Cell>Wayne</Table.Cell>\\n      <Table.Cell>32</Table.Cell>\\n      <Table.Cell>December 18</Table.Cell>\\n    </Table.Row>\\n  </Table.Body>\\n</Table>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Table","group":"Collections","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=2387%3A1928","switch":true},"scope":{}},"navigation":[{"title":"Code Hightlight Test","slug":"highlight"},{"title":"Marigold","slug":"index"},{"name":"introduction","items":[{"title":"Getting Started","caption":"This page describes how to get started building an application with Marigold.","order":1,"slug":"introduction/getting-started"},{"title":"About","caption":"Learn about the goals of Marigold and how it aims to help building user interfaces.","order":2,"slug":"introduction/about"},{"title":"Concepts","caption":"This page discusses the concepts and ideas that Marigold is build upon.","order":3,"slug":"introduction/concepts"},{"title":"Theming","caption":"This page explains how themes workd and how to use them.","order":4,"slug":"introduction/theming"},{"title":"FAQ","caption":"This pages aims to help with the most common questions and inquiries.","order":0,"slug":"introduction/faq"}],"groups":[]},{"name":"foundation","items":[{"title":"Box Primitive","slug":"foundation/box-primitive"},{"title":"CSS-in-JS","slug":"foundation/css-in-js"},{"title":"Icons","slug":"foundation/icons"},{"title":"Theme & Variants","slug":"foundation/themes-variants"}],"groups":[]},{"name":"components","items":[],"groups":[{"name":"Layout","items":[{"title":"Aside","group":"Layout","slug":"components/aside"},{"title":"Aspect","group":"Layout","slug":"components/aspect"},{"title":"Box","group":"Layout","slug":"components/box"},{"title":"Breakout","group":"Layout","slug":"components/breakout"},{"title":"Center","group":"Layout","slug":"components/center"},{"title":"Columns","group":"Layout","slug":"components/columns"},{"title":"Container","group":"Layout","slug":"components/container"},{"title":"Content","caption":"<short purpose of component> (optional)","group":"Layout","slug":"components/content"},{"title":"Divider","group":"Layout","slug":"components/divider"},{"title":"Inline","group":"Layout","slug":"components/inline"},{"title":"Split","group":"Layout","slug":"components/split"},{"title":"Stack","group":"Layout","slug":"components/stack"},{"title":"Tiles","group":"Layout","slug":"components/tiles"}]},{"name":"Forms","items":[{"title":"Button","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=11%3A269","switch":true,"slug":"components/button"},{"title":"Checkbox","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=467%3A159","group":"Forms","switch":true,"slug":"components/checkbox"},{"title":"Input","group":"Forms","switch":true,"slug":"components/input"},{"title":"Label","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=92%3A0","switch":true,"slug":"components/label"},{"title":"NumberField","group":"Forms","switch":true,"slug":"components/number-field"},{"title":"Radio","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=467%3A332","switch":true,"slug":"components/radio"},{"title":"Select","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=2596%3A2348","switch":true,"slug":"components/select"},{"title":"Slider","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=845%3A1254","switch":true,"slug":"components/slider"},{"title":"Switch","group":"Forms","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=2458%3A2254","slug":"components/switch"},{"title":"TextArea","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=454%3A1","group":"Forms","switch":true,"slug":"components/text-area"},{"title":"TextField","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=340%3A0","group":"Forms","switch":true,"slug":"components/text-field"}]},{"name":"Collections","items":[{"title":"Table","group":"Collections","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=2387%3A1928","switch":true,"slug":"components/table"}]},{"name":"Overlay","items":[{"title":"Dialog","group":"Overlay","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=845%3A1095","switch":true,"slug":"components/dialog"},{"title":"Menu","group":"Overlay","slug":"components/menu"},{"title":"Tooltip","group":"Overlay","slug":"components/tooltip"}]},{"name":"Content","items":[{"title":"Badge","group":"Content","switch":true,"slug":"components/badge"},{"title":"Card","group":"Content","switch":true,"slug":"components/card"},{"title":"Footer","group":"Content","slug":"components/footer"},{"title":"Header","group":"Content","slug":"components/header"},{"title":"Headline","caption":"<short purpose of component> (optional)","group":"Content","switch":true,"slug":"components/headline"},{"title":"Icon","group":"Content","slug":"components/icon"},{"title":"Image","group":"Content","slug":"components/image"},{"title":"Link","group":"Content","switch":true,"slug":"components/link"},{"title":"List","group":"Content","switch":true,"slug":"components/list"},{"title":"Message","group":"Content","figma":"https://www.figma.com/file/DFKyTGHAoDxOsUBPszLLxP/%F0%9F%8F%B5%EF%B8%8FMarigold?node-id=582%3A119","switch":true,"slug":"components/message"},{"title":"Text","group":"Content","switch":true,"slug":"components/text"},{"title":"VisuallyHidden","group":"Content","slug":"components/visually-hidden"}]},{"name":"Application","items":[{"title":"Provider","group":"Application","slug":"components/provider"}]}]},{"name":"develop","items":[{"title":"Release","slug":"develop/release"},{"title":"Scripts","slug":"develop/scripts"}],"groups":[]}]},"__N_SSG":true}